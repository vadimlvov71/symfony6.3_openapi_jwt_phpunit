# config/packages/nelmio_api_doc.yaml
nelmio_api_doc:
    documentation:
        #servers:
          #- url: /task222/api/new
          #  description: API over HTTP
        paths:
            '/task/api/login_check':
                post:
                    tags:
                        - Json Web Token
                    summary: login_check violates Rest Api rule 2.2.4. Do not use underscores.
                    description: 'Create a JWT'
                    requestBody:
                        content:
                            application/json:
                                schema:
                                    properties:
                                        username:
                                            type: string
                                        password:
                                            type: string 
                                    $ref: '#/components/schemas/Token'               
                    responses:
                        '201':
                            description: result of validation and insertion.
                            content:
                                application/json:
                                    schema:
                                        #type: object
                                        example: ["validate_success","last_insert_id", "insert_success"]
            '/task/api/token/refresh':
                post:
                    tags:
                        - Json Web Token
                    summary: Login into the api by refresh token.
                    requestBody:
                        content:
                            application/json:
                                schema:
                                    properties:
                                        refresh_token:
                                            type: string
                                    type: object
                    responses:
                        '200':
                            description: OK
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            token:
                                                type: string
                                            refresh_token:
                                                type: string
                        '401':
                            description: An authentication exception occurred.
                    security: []
            '/task/api':
                post:
                    tags:
                        - CRUD
                    summary: insert a new task.
                    description: 'Insert a new task'
                    requestBody:
                        content:
                            application/json:
                                schema:
                                    properties:
                                        title:
                                            type: string
                                        description:
                                            type: string
                                        status:  
                                            $ref: '#/components/schemas/Status'
                                        priority: 
                                            type: string
                                        user_id: 
                                            type: string
                                        parent_id:
                                            type: string
                                    $ref: '#/components/schemas/Example' 
                                        
                                   
                    responses:
                        '201':
                            description: result of validation and insertion.
                            content:
                                application/json:
                                    schema:
                                        #type: object
                                        example: ["validate_success","last_insert_id", "insert_success"]
           
            '/task/api/{user_id}/{id}':
                put:
                    tags:
                        - CRUD
                    summary: edit a task.
                    description: 'edit an task'
                    parameters:
                    -
                        name: user_id
                        in: path
                        description: 'id of an user'
                        required: true
                        schema:
                            $ref: '#/components/schemas/User'
                    -
                        name: id
                        in: path
                        description: 'id of an task'
                        required: true
                    requestBody:
                        content:
                            application/json:
                                schema:
                                    properties:
                                        title:
                                            type: string
                                        description:
                                            type: string
                                        status:  
                                            $ref: '#/components/schemas/Status'
                                        priority: 
                                            type: string
                                        user_id: 
                                            type: string
                                        parent_id:
                                            type: string
                                    example:
                                        title: 'Task11 Edited'
                                        description: 'Description 11Edited'
                                        status: "todo"
                                        priority: '5'
                                        
                    responses:
                        '200':
                            description: result of validation and updating.
                            content:
                                application/json:
                                    schema:
                                        example: ["validate_success","update_success"]                  
            '/task/api/{user_id}/{id}/':
                delete:
                    tags:
                        - CRUD
                    description: 'delete an task'
                    parameters:
                        -
                            name: user_id
                            in: path
                            description: 'id of an user'
                            required: true
                            schema:
                                $ref: '#/components/schemas/User'
                        -
                            name: id
                            in: path
                            description: 'id of an task'
                            required: true 
                            schema:
                                type: string 
                    responses:
                        '200':
                            description: result of deletion.
                            content:
                                application/json:
                                    schema:
                                        example: ["validate_success","delete_success"]      
            '/task/api/{user_id}/{id}/{status}':
                patch:
                    tags:
                        - CRUD
                    summary: change status of a task.
                    description: 'edit one field: status'
                    parameters:
                        -
                            name: user_id
                            in: path
                            description: 'id of an user'
                            required: true
                            schema:
                                $ref: '#/components/schemas/User'
                        -
                            name: id
                            in: path
                            description: 'id of an task'
                            required: true
                            schema:
                                type: string
                        -
                            name: status
                            in: path
                            description: 'status of a task'
                            required: true
                            schema:
                                $ref: '#/components/schemas/Status'
                    responses:
                        '200':
                            description: result of validation and updating.
                            content:
                                application/json:
                                    schema:
                                        example: 
                                            - ["validate_success", "status_update_success"]  
                                            - ["this task has nesting tasks: 1 , 5, 20 with status: 'todo'"]
            '/task/api/list/{user_id}':
                get:
                    parameters:
                        -
                            name: user_id
                            in: path
                            description: 'id of an user'
                            required: true
                            schema:
                                $ref: '#/components/schemas/User'
                    responses:
                        '200':
                            description: list of task of a user.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Example'                               
            '/task/api/filter/{user_id}/status/{status}':
                get:
                    tags:
                        - search by a criteria
                    summary: search by status.
                    parameters:
                        -
                            name: user_id
                            in: path
                            description: 'id of an user'
                            required: true
                            schema:
                                example: ["User1", "User2"]
                                $ref: '#/components/schemas/User'
                        -
                            name: status
                            in: path
                            description: 'status of a task'
                            required: true
                            schema:
                              $ref: '#/components/schemas/Status'
                    responses:
                        '200':
                            description: filter by status.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Example' 

            '/task/api/filter/{user_id}/priority/{priority}':
                get:
                    tags:
                        - search by a criteria
                    summary: search by priority.
                    parameters:
                        -
                            name: user_id
                            in: path
                            description: 'id of an user'
                            required: true
                            schema:
                                $ref: '#/components/schemas/User'
                        -
                            name: priority
                            in: path
                            description: 'priority of a task'
                            required: true
                            schema:
                              $ref: '#/components/schemas/Priority'
                    responses:
                        '200':
                            description: result of validation and insertion.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Example' 
            '/task/api/filter/{user_id}/title/{title}':
                get:
                    tags:
                        - search by a criteria
                    summary: search by title.
                    parameters:
                        -
                            name: user_id
                            in: path
                            description: 'id of an user'
                            required: true
                            schema:
                                example: ["User1", "User2"]
                                $ref: '#/components/schemas/User'
                        -
                            name: title
                            in: path
                            description: 'title of a task'
                            required: true
                            schema:
                                type: string
                    responses:
                        '200':
                            description: result of full text search of title.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Example' 
                                        
            '/task/api/filter/{user_id}/description/{description}':
                get:
                    tags:
                        - search by a criteria
                    summary: search by description.
                    parameters:
                        -
                            name: user_id
                            in: path
                            description: 'id of an user'
                            required: true
                            schema:
                                example: ["User1", "User2"]
                                $ref: '#/components/schemas/User'
                        -
                            name: description
                            in: path
                            description: 'search description of a task'
                            required: true
                            schema:
                                type: string
                    responses:
                        '200':
                            description: result of full text search of description.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Example' 
            
            '/task/api/{user_id}/tasks_tree/{id}':
                get:
                    parameters:
                        -
                            name: user_id
                            in: path
                            description: 'id of an user'
                            required: true
                            schema:
                                $ref: '#/components/schemas/User'
                        -
                            name: id
                            in: path
                            description: 'id of a task'
                            required: true
                            schema:
                                type: string
                    responses:
                        '200':
                            description: The tree of task of a task.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Example' 
            '/task/api/{user_id}/priority_by/{priority_sort}/created_by/{created_sort}':
                get:
                    parameters:
                        -
                            name: user_id
                            in: path
                            description: 'id of an user'
                            required: true
                            schema:
                                $ref: '#/components/schemas/User'
                        -
                            name: priority_sort
                            in: path
                            description: 'order by priority'
                            required: true
                            schema:
                                $ref: '#/components/schemas/OrderBy'
                        -
                            name: created_sort
                            in: path
                            description: 'order by priority'
                            required: true
                            schema:
                                $ref: '#/components/schemas/OrderBy'
                    responses:
                        '200':
                            description: task sorted by priority and createdat fields.
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/Example' 
            
        info:
            title: Symfony REST API and JWT
        

        components:
            securitySchemes:
                Bearer:
                    type: http
                    scheme: bearer
                    bearerFormat: JWT
            schemas:
                User:
                    type: string
                    enum:
                        - 1
                        - 2
                Status:
                    type: string
                    enum:
                        - todo
                        - done
                OrderBy:
                    type: string
                    enum:
                        - desc
                        - asc
                Priority:
                    type: string
                    enum: ["1", "2", "3", "4", "5"]
                Example:
                    example:
                        title: 'Task New'
                        description: "Some description new"
                        status: "todo"
                        priority: "3"
                        user_id: "1"
                        parent_id: "20"
                Token:
                    example:
                        username: 'vadim'
                        password: "12345678"
                
        security:
            - Bearer: []
        #eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE3MTEwMTg1MzgsImV4cCI6MTcxMTAyMjEzOCwicm9sZXMiOlsiUk9MRV9VU0VSIl0sInVzZXJuYW1lIjoidmFkaW0ifQ.tHrf2wmGwzvvK-2TBmPrqAaB-LWh2nd672V0fsaSnVK66tVz89m6ljoVn1y4op6gk9vh5UxQVnPo-a9lBuS3czcO_WNwcvUVFq0-aq-zEm1rSARy_xXr5NV40C1E9Sn4Oez5lWq3d9mk-cX5clMOsHUq_LABMK-8Bu8LPz_qD8XRLWuKy3kS11uCxMaNITQ91-85OSAyXrfH91fs3Zw1gmgD5ThGh-K6uqgnW_z6oGjfmId4oDAvNdraR4fTQxq4Z6HiY2WzcYbeAMPAIfPydl09K1jsWAWWs2Lvs51HjJ0_hlGjaKU1kMGBwVhshZGsAillz6884NoScsHSP8hqNw

    areas:
        path_patterns: # an array of regexps (document only routes under /api, except /api/doc)
            - ^/api(?!/doc$)
        host_patterns: # document only routes with a host of the form api.*
            - ^api\.